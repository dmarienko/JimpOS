[On Wed, 12 Dec 2001, Frederik Holljen wrote:]
> Hi,
> WARNING: newbie questions ahead! :)
> I''m trying to make my own OS and I've managed to write a two stage
> bootloader which loads my kernel (does nothing at the moment) and puts me
> into protected mode. Now I'm off to build the kernel itself, and this
> brings me into some design questions.
> I've read at some OS sites that it's a good idea to put your kernel at the
> 1MB mark. Why is this? (other than the obvious 640K limit) Anyway, starting
> the kernel at 1MB I can think of the following kernel layout memory:
> MEM
> ---------------------- 0
> ---------------------- 640 K
> Bios/VGA/... stuff
> ----------------------- 1MB
> KERNEL CODE
> -----------------------  1MB + kernel size
> KERNEL STACK
> -----------------------  1MB  + kernel size + stack size
> KERNEL HEAP
> ------------------------
> USER MEM
> ------------------------ End of MEM
> Is this feasible or way out?

Yes.

> Questions:
> 1. What do you do with the unused 640K at the beginning?

DMA buffers for example... (they have to be in the lower 16 Mb)

> 2. Is code/stack/heap a usable solution or is it better to rearrange the
> three components?

It is ok, most people do it like this.

> 3. How large should the stack be?

For startup: around one page
For a microkernel: around 4 pages
For a monolithic kernel: around 16 pages for every process

> 4. What important aspects have I forgotten?!? (I'm sure there are many)

Paging...

> Any hints, comments or pointers to previous discussions (I searched at
> google but didn't find anything useful, the database is to LARGE) will be
> greatly appreciated.

It's a good idea to put your bios interface code into the 1st 64Kb above
the 1Mb mark (HMA), so v86 bios code could access the kernel's memory
structures.

   Viktor


ps:
My layout: (at least now)

0x010000-0x0a0000: dma areas
0x100000-0x110000: bios interface, kernel startup code
0x110000-0x200000: kernel code, stack & data
0x200000-0x400000: kernel page tables
-> from here virtual != physical (mapped)
0x400000-0x800000: page tables of the current process
0x800000-2Gb:      kernel slabs (heap)
2Gb-4Gb:           user area (usr_cs, usr_ds base at 2Gb)
