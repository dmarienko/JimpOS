
 На 27/08/2001 - готов загрузчик boot.asm - загружает и запускает
 				 head.asm
 Следующий шаг - попытаться переключиться в PM. 

 30/08/2001 - переключение в РМ !
 			- разобраться с DS и CS селекторами.

 05/09/2001 - OK с DS и CS !

 06/09/2001 - схема такова:
              boot.asm - загрузочный сектор и переключение в PM
              head.asm - startup module - инициализирует регистры
              			 если надо устанавливает новую GDT (???)
              			 и запускает нечто типа main.c
              			 компилится
              			  nasmw head.asm -fcoff -o head.o
              			 далее его надо собрать с main.c
               
 				         --- OK !!! ---

 29/09/2001 - пофиксен жуткий баг, испивший огромное кол-во крови в функции
 			  read_sect bootloader'a. Правильно считывался и заносился в
 			  память только первый сектор, содержащий ядро (512б).

 01/10/2001 - разобрался с установкой GDT в защищенном режиме. Можно
 			  двигаться дальше.

  - - - - ( *** NO WORK *** ) - переезд - - - -

 10/12/2001 - система переведена на стартовый адрес 0x0000
              точка входа в start32 = 0x0000
              попытка включить paging mode

 11/12/2001 - заработал режим paging memory !!!
              ньюанс - page_dir и page_tab должны быть aligne(0x1000)
			  Сборка через корневой makefile

 17/12/2001 - выбросил видеосегмент из GDT таблицы. Переделал console.c
 			  Не нужны больше функции farptr.c
 			  "Заработали" прерывания !
 			  Тонкий ньюанс - boot переключал в защ. режим и устанавливал
 			  селектор кода в 0x18, потом устанавливали новую gdt с селектором
 			  0x08, но явного перехода ljmp $8,xxxx не делалось, поэтому при 
 			  far call в стеке адрес возврата был (0x18:ret_addr)

 09/01/2002 - Изменения в boot.asm - после процедуры чтения ядра с флоппика и
              остановки мотора нужна небольшая пауза ( для Celeron 800 - это
              надо, для Duron 800 - нет )

 17/01/2002 - Выкинул видеосегмент из GDT boot loadera

 26/08/2002 - После долгого перерыва снова начал работу над Jimp
			  наконец-то переполз с разработкой под Linux
			  head.asm переписал под GNU asm --> head.S
		      надо бы вообще отказаться от nasm в boot-loadere.
			  Теперь 2 задачи - memory allocator и манипуляции с процессами.

 25/11/2002 - Переделал bootloader - теперь он грузит ядро начиная с 1 МБ
			  ОЗУ !!! Сохраняем 1-й мегабайт 
			  памяти для всяких вещей типа DMA и т.д. Ядро, похоже, 
			  будет занимать 1-е 4 МБ памяти, остальное отдаем под процессы.
			  В boot.asm пытаюсь получить сколько всего памяти
			  в машине (через int 0x15) - пока есть сложности с > 64 MB.
			  Переделаны функции console - кое-какая оптимизация и т.д.
	  
 29/11/2002 - Начал вплотную разработку kernel memory allocator. Пока через bitmap.
 
 07/12/2002 - Реализовал kprintf( char *fmt, ... ). Наконец-то ! Объем кода
	      уменьшился на ~600 байтов. Но главное - стало намного удобнее !
	      Остался непонятный глюк: если где-то в коде используется
	      конструкция switch(..){ case ...: .... } то после определенного
	      числа case'ов ( > 4 ) объем кода kernel.img выростает до 1 МБ  :О !!! 
	      Объем объектников нормальный -> что-то происходит при линковке ?
	      
	      В boot.asm внес задержку после enableA20 и переключением в
	      unreal режим (иначе не грузилось на нормальной машине).
	      
 11/12/2002 - Пофиксен глюк с увеличением размера кода ядра при использовании
	      switch/case ( > 4 ) (см. пред. топик). Дело было в следующем:
	      при определенном числе этих самых case'ов компилер, чтобы
	      уменьшить число простых проверок-переходов, создает таблицу этих
	      самых переходов (т.е. просто таблицу с адресами), а switch/case
	      реализуется как jmp $start_table(4,eax) где в eax - немного
	      преобразованный аргумент switch. Так вот эту таблицу адресов он
	      размещает в секции .rodata (read only data). У меня не было
	      задано точно где эту секцию поместить и компилер ложил ее в
	      начало kernel.img (почему - _мне_ непонятно !),  размер
	      определялся физическим размещением ядра ( что-то около 1Мб ) что
	      и вызывало увеличение до 1Mb.
		  
 23/12/2002 - Перевел boot.asm на boot.S - отпала необходимость использования
		  nasm. Теперь проект полностью собирается с помощью gcc.

 23/12/2002 - Реализованы ф-ции kmalloc и kfree. kmalloc - выделяет указатель
		  на вирт. память, но не мапит ее из физической кучи. Этим занимается
		  pagefault_handler - проверяет был ли запрошенный вирт. адрес выделен
		  и если да, подмапливает страничку. kfree - оперирует с блоками
		  выделенной виртуальной памяти. Должен еще и отмапливать
		  освобожденные странички - но это пока не реализовано.
		  
 31/05/2003 - Реализована функция "отмапливания" освобожденных страничек
		  физической памяти. Вкратце идея такова: пусть имеется указатель на
		  память, котрый мы хотим освободить - а. Размер этой памяти - l.
		  Определяем адреса страничек на которых находятся начало и конец
		  освобождаемой области: А1 = STRIP_PAGE(a), A2 = STIP_PAGE(a+l).
		  Далее находим адреса и длины предыдущей и следующей занятых
		  областей ( ap, lp и an, ln). Для них находим соответствующие адреса
		  страничек. Ap1 = S_P(ap), Ap2 = S_P(ap+lp) и An1 = S_P(an),
		  An2 = S_P(an+ln).
		  Теперь 
				если Ap2 == A1 --> страничка A1 занята и ее отмапливать не
		  надо;
				если An1 == A2 --> страничка A2 занята и ее отмапливать не
		  надо;

		  Находим коэффициент k = (A2-A1)/4096 - 1;
                             /
		                    | -1, область находится на одной страничке;
					   k = <   0, область на двух смежных страницах;
					        |  n>0, кол-во страниц между A1 и A2;
							 \
		  Отмапливаем мы A1 и A2 (в зависимости от того заняты они или нет)
		  и набор аресов:

		                { A1 + i*4096 }, i = 1....n, если  n > 0.


 13/08/2003 - Заработали два запущенных процесса: task1, task2 (по очереди 
		  передают управление один другому). Разобраться как обычно делают 
		  sheduler ? 
		  Очень не нравится  функция kfree() !!! Надо бы переделать. 
		  Идея в следующем: "отмапливать" при cледующем выделении через 
		  kmalloc().

01/12/2003 - Переписана функция kfree() - использован более упрощенный алгоритм
		  освобождения памяти. Нормально заработало переключение контекста 
		  процессов. Следующее, что надо сделать:
		  каждый процесс - в своем адресном пространстве,
		  разбор ELF, загрузка в память и выполнение.

12/01/2004 - Добавил на sourceforge: http://jimpos.sf.net
			   
07/12/2004 - Добавлен механизм spinlock's и переработан механизм переключения 
		   потоков. Решил остановиться на реализации нитей внутри ядра. Нет особой
		   необходимости возиться с обвязкой для процессов - возникает больше 
		   проблем чем положительных моментов. Всего-то надо - запустить java 
		   интерпретатор и реализовать потоки.
		   Появилась ф-ция kcreate_thread() позволяющая запускать нити. 

		   - Какие-то проблемы с освобождением памяти, когда запущены много потоков
		   и некоторые из них завершаются (ф-ция kfree похоже не всегда правильно
		   отмапливает странички) - провести доп. исследования. (!!!) 

06/01/2005 - Планы на будущее 
		    \---+------------/
				|
				+--< пофиксить баг kfree при завершении потоков
				|
				+--< kill_thread - для посылки сигналов нитям
				|
				+--< sleep - для впадения в спячку (продумать механизм)
				|
				+--< необходимо проработать механизм диспетчеризации нитей 
				|
				+--< использование прерываний
				|	      |
				|		  +--< таблица соотв. прерываний - обработчикам (приоритет потока !)
				|		  |
				|		  +--< на какие прерывания можно вещать обработчики и как ?
				|
				+--< использование всего ОЗУ (сейчас пока 4 мега)
				|
				+--< использование dma - пока не горит, но скоро может понадобится

