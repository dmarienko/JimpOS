Варианты дальнейшего развития Jimp OS:
-------------------------------------

		 I. Вариант реализации многозадачной ОС используя модель процессов

			"+":
				1). Занимаем всю память (на тек. момент)
				2). Разделенные адресные пр-ва (защищенность)

			"-":
				1). Необходимо реализовывать механизмы синхронизации между процессами
					и механизмы обмена сообщениями
				2). Вызовы ядра через шлюзы
				3). Реализация библиотеки системных вызовов (эту библиотеку надо будет 
					или линковать с каждым процессом статически или реализовывать 
					динамические объекты)
				4). Аллокатор памяти для процессов
				5). В дальнейшем все равно прийдется реализовывать нити внутри процесса 
					(вопросы диспетчеризации и т.д.)



		 II. Вариант реализации многозадачной ОС: "нити внутри ядра"

			"+":
				1). Простота реализации
				2). Все находится внутри ядра (не нужна библиотека сист. вызовов)

			"-":
				1). На текущий момент доступно только 4MB памяти (проблемы реализации)
				2). Все находится внутри ядра - любая ошибка фатальна


Для реализации варианта II необходимо:
-------------------------------------
	1). Попробовать LDT 
            в принципе не нужно для нитей внутри ядра (нет необходимости пока)

	2). Механизм создания/завершения нити внутри ядра
		    добавлена ф-ция kcreate_thread
			- нужна ф-ция kill_thread

	3). Механизмы синзронизации нитей
            добавлен механизм spin_lock (spinlock.h) - примитивные mutexes
			- необходим механизм sleep !

	4). Диспетчеризация нитей

	5). Продумать эффективные механизмы использования всего ОЗУ

	6). Использование нитями прерываний (назначение обработчиков прерываний)
		    - таблица соответствия прерываний и обработчиков (с приоритетами)
		    - будут ли это isr или event_handlers ?
 
